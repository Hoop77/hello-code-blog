<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on hellocodeblog</title>
    <link>https://hellocodeblog.com/post/</link>
    <description>Recent content in Posts on hellocodeblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2019 by Philipp Badenhoop. All Rights Reserved.</copyright>
    <lastBuildDate>Wed, 01 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hellocodeblog.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dual-Arm Grasp Detection of Chairs</title>
      <link>https://hellocodeblog.com/post/dual-arm-grasping/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hellocodeblog.com/post/dual-arm-grasping/</guid>
      <description>During my master studies at Technical University of Munich, I attended a practical course where I made two robots grasping a chair in a ROS simulation. Sounds easy, but was a TON of work! I came to the conclusion that even though Gazebo is the first choice simulator in ROS, it is absolutely not ready for doing even the most basic things such as grasping! Although it was quite painful at some points, I really learned A LOT.</description>
    </item>
    
    <item>
      <title>Generating Harmony using Context-Free Grammar</title>
      <link>https://hellocodeblog.com/post/generating-harmony-using-context-free-grammar/</link>
      <pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hellocodeblog.com/post/generating-harmony-using-context-free-grammar/</guid>
      <description>Background In this post, I explain an exciting framework used to analyze and generate sequences of chords in musical pieces. Before diving into the main part, I provide a brief introduction of the necessary concepts in music and harmony theory.
Music Theory - Chords and Scale Degrees Playing the piano has always been one of my greatest passions. After playing classical music for several years, I fell in love with improvisation as well as playing songs in different arrangements and styles.</description>
    </item>
    
    <item>
      <title>Autonomous Racing with Deep Learning</title>
      <link>https://hellocodeblog.com/post/bachelor-thesis/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hellocodeblog.com/post/bachelor-thesis/</guid>
      <description>Today, I finally defended my bachelor thesis. It was a brilliant experience since many of my fellow students supported me by taking part at this event today. A big thanks to all of them!
The topic of the thesis was &amp;ldquo;Autonomous Racing with Deep Learning&amp;rdquo;. In the work, I developed a new approach to autonomous racing which hasn&amp;rsquo;t been introduced in literature so far to my knowledge. Furthermore, I strongly focused on giving a formal but comprehensible introduction into deep learning which can be read completely standalone.</description>
    </item>
    
    <item>
      <title>An Introduction to asionet</title>
      <link>https://hellocodeblog.com/post/asionet/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hellocodeblog.com/post/asionet/</guid>
      <description>Introduction In case you&amp;rsquo;ve ever done some network programming in C++, you probably stumbled upon the quasi-standard boost::asio library. It uses asynchronous programming making it scalable but on the other side, it takes quite some time to learn how to use it correctly.
asionet is built on top of boost::asio which makes it 100% compatible with it but easier to use at the same time. For example, managing timeouts and sending and receiving serialized messages is done with only a few lines of code.</description>
    </item>
    
  </channel>
</rss>